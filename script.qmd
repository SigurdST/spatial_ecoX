---
title: "Project in Spatial Econometrics"
format: html
editor: visual
authors: "Anaïs BOUGHANEM, Théo DRUILHE and Sigurd SAUE"
---

We download the necessary packages.

```{r, message=FALSE, warning=FALSE}
library(dplyr)
library(sf)
library(WDI)
library(tidyr) 
library(ggplot2)
library(RColorBrewer)
library(spdep)
# install.packages("rnaturalearth")
library(rnaturalearth)
# install.packages("rnaturalearthdata")
```

# 1 Data

## 1.1 Migration flow data

We first load and analyze the data.

```{r}
# Load the migration data
load("mig_data.RData")

# Inspect the structure of the data
str(mig_data)
```

```{r}
# Filter for the period 2020–2024 and select the Pseudo-Bayesian flow estimates
mig_rate_2020_2024 <- mig_data %>%
  filter(period == "2020-2024") %>%
  select(origin, dest, mig_rate)

# Check the first few rows of the result
head(mig_rate_2020_2024)
```

### Migration Rate Method

Dennett (2016) proposed a method to estimate bilateral migration flows using a **single stock table** and an estimate of **total global migration**. This approach allows us to generate directional flows even when direct flow data is unavailable.

#### Step-by-Step Method

Let:

-   $s_{gh}^t$: Number of migrants **from origin** $g$ living in **destination** $h$ at time $t$
-   $M^t$: Estimated **total global migration** for the period
-   $r_{gh}^t$: Estimated **flow rate** from $g$ to $h$ at time $t$
-   $F_{g \rightarrow h}^t$: Estimated **flow** from $g$ to $h$

Then:

1.  **Compute global migration rate**: $$
    r_{gh}^t = \frac{s_{gh}^t}{\sum_{g \neq h} s_{gh}^t}
    $$ The denominator is the sum of all off-diagonal stock values — i.e., total foreign-born population globally.

2.  **Estimate total migration flows (M)**: Since $M^t$ is not directly known, it's approximated by: $$
    M^t = \sum_h \left| \sum_g s_{gh}^{t+1} - \sum_g s_{gh}^{t} \right|
    $$ This is the **sum of absolute net migration changes** per destination (column totals).

3.  **Estimate bilateral flow**: $$
    F_{g \rightarrow h}^t = M^t \times r_{gh}^t
    $$

#### Interpretation

-   The stock table provides the **relative distribution** of migrants.
-   The sum of absolute net changes provides a **scaling factor** for total migration volume.
-   The resulting flows maintain **global consistency** while reflecting the stock structure.

### Description of the Migration Rate Flow Map (2020–2024)

The map displays the largest bilateral migration flows for the period 2020–2024, estimated using the Migration Rate method. In this visualization, arrows represent the direction and relative magnitude of flows between countries, while vertical bars beside each country illustrate the total volume of outgoing (left bar) and incoming (right bar) flows.

This method emphasizes migration intensity, meaning flows are normalized by the size of the origin population. As such, it reveals not only where large numbers of people are moving, but also which countries are experiencing high migration rates relative to their population size.

Several prominent migration corridors are visible:

-   From Latin America to North America, especially strong flows from Mexico and Central America to the United States.
-   From South Asia and Southeast Asia to the Gulf countries or to the United States and Canada.
-   From Eastern Europe to Western Europe, especially toward Germany and the UK.

Major countries of origin with significant outward migration include India, Mexico, Syria and the Philippines. On the receiving side, major destinations include the United States, Germany, the United Kingdom, France, Australia, and the Gulf states.

The map highlights both the volume and directionality of global migration, showing that migration flows are not evenly distributed but rather concentrated in a few dominant corridors.

### Comparison of the Migration Rate Method with Other Estimation Methods

To evaluate the reliability and interpretability of the Migration Rate method, we compared it with five alternative estimation methods: Pseudo-Bayesian, Drop Negative, Reverse Negative, Minimization Open, and Minimization Close. The visualizations of each method reveal key similarities and differences in how major global flows are represented.

#### Similarities

Across all six maps, the same global migration corridors appear consistently, regardless of the estimation technique.

These consistent patterns suggest that the main global migration trends are robust across different estimation methods.

#### Notable Differences Between Methods

**Pseudo-Bayesian**

-   Flows seem globally bigger than on the other maps.

**Drop Negative and Reverse Negative**

-   These methods result in sparser maps with fewer visible corridors.
-   Strong flows like Mexico to the US still appear, but smaller flows are often eliminated.

**Minimization Open and Close**

-   Very similar to the Migration Rate method.

**Migration Rate**

-   The Russia to Ukraine arrow is reversed compared to the other methods, indicating a different interpretation of the flow direction.

## 1.2 Contours data

We load the contours data and inspect it.

```{r}
# Import the world contours GeoJSON file
world <- st_read("CCMN_GeoDATA.geojson")

# Transform the Coordinate Reference System to ESRI:54030 (World Robinson projection)
world_proj <- st_transform(world, crs = 'ESRI:54030')
```

## 1.3 Explanatory variables at country level

```{r}
load("covariates.RData")
```

## Additional Explanatory Variable: Unemployment Rate

To complement the existing set of explanatory variables, we propose adding the **unemployment rate** as a potential determinant of international migration. A high unemployment rate in a country can push individuals to emigrate in search of better opportunities, while low unemployment in destination countries may attract migrants seeking employment.

This variable is used in several studies, including Hatton & Williamson (2002) and the OECD International Migration Outlook reports, as a key economic factor in explaining migration trends.

The data was retrieved from the **World Bank Open Data** platform, using indicator code `SL.UEM.TOTL.ZS`, and merged into the `my_covariates` dataset for the years corresponding to each migration period (e.g., 1992 for 1990–1995).

```{r}
# Download unemployment rate from World Bank (indicator code: SL.UEM.TOTL.ZS)
# We'll select data for years matching the reference points (1992, 1997, 2007, 2012, 2017, 2022)
unemp_data <- WDI(indicator = "SL.UEM.TOTL.ZS", start = 1992, end = 2022, extra = TRUE) %>%
  filter(year %in% c(1992, 1997, 2002, 2007, 2012, 2017, 2022)) %>%
  select(iso3c, year, unemployment_rate = SL.UEM.TOTL.ZS)
```

```{r}
# Merge unemployment data into the covariates
unemp_data <- unemp_data %>%
  mutate(year = as.character(year))
my_covariates <- my_covariates %>%
  mutate(period = recode(period,
                         "1990-1995" = "1992",
                         "1995-2000" = "1997",
                         "2000-2005" = "2002",
                         "2005-2010" = "2007",
                         "2010-2015" = "2012",
                         "2015-2020" = "2017",
                         "2020-2024" = "2022"))
my_covariates <- my_covariates %>%
  left_join(unemp_data, by = c("ISO3"="iso3c", "period"="year"))
```

# 2 Migration Flows and Dependent Variables

In this section, we analyze both **immigration** and **emigration** flows, compute per capita migration rates, and create a net migration variable.

```{r}
# 1. Filter migration data for the period 2020–2024
mig_data_filtered <- mig_data %>%
  filter(period == "2020-2024")

# 2. Aggregate inbound and outbound flows by country
inflows <- mig_data_filtered %>%
  group_by(dest) %>%
  summarise(inflow = sum(reverse_neg, na.rm = TRUE))

outflows <- mig_data_filtered %>%
  group_by(origin) %>%
  summarise(outflow = sum(reverse_neg, na.rm = TRUE))

# 3. Keep only the population data for 2022 (corresponding to the 2020–2024 period)
pop_2022 <- my_covariates %>%
  filter(period == "2022") %>%
  select(ISO3, population)

# 4. Merge population with flows and compute per capita migration indicators
table_rates <- pop_2022 %>%
  left_join(inflows, by = c("ISO3" = "dest")) %>%
  left_join(outflows, by = c("ISO3" = "origin")) %>%
  mutate(
    inflow = replace_na(inflow, 0),        # Replace missing inflow values with 0
    outflow = replace_na(outflow, 0),      # Replace missing outflow values with 0
    immigrates = inflow / population,      # Compute immigration rate
    emigrates = outflow / population,      # Compute emigration rate
    net = immigrates - emigrates           # Compute net migration rate
  )
```

```{r}
# Top 10 countries in absolute terms (not per capita)
top10_outflow_abs <- table_rates %>%
  arrange(desc(outflow)) %>%
  slice_head(n = 10)

top10_inflow_abs <- table_rates %>%
  arrange(desc(inflow)) %>%
  slice_head(n = 10)

# Two plots side by side
library(ggplot2)
library(patchwork)  # to combine the plots

p1 <- ggplot(top10_outflow_abs, aes(x = reorder(ISO3, outflow), y = outflow)) +
  geom_point(size = 3) +
  coord_flip() +
  labs(title = "Top Outflows", x = "", y = "") +
  theme_minimal()

p2 <- ggplot(top10_inflow_abs, aes(x = reorder(ISO3, inflow), y = inflow)) +
  geom_point(size = 3) +
  coord_flip() +
  labs(title = "Top Inflows", x = "", y = "") +
  theme_minimal()

# Display both plots side by side
p1 + p2

```

```{r}
# Add country names
table_rates <- table_rates %>%
  left_join(world %>% st_drop_geometry() %>% select(ISO3, VISUALIZATION_NAME), by = "ISO3")

# Top 10 emigration/immigration per capita
top10_emigrates <- table_rates %>%
  arrange(desc(emigrates)) %>%
  slice_head(n = 10)

top10_immigrates <- table_rates %>%
  arrange(desc(immigrates)) %>%
  slice_head(n = 10)
```

```{r}
# Scatter plots with full country names
p3 <- ggplot(top10_emigrates, aes(x = emigrates, y = reorder(VISUALIZATION_NAME, emigrates))) +
  geom_point(shape = 1, size = 3) +
  labs(title = "Top Outflows (per capita)", x = "", y = "") +
  theme_minimal()

p4 <- ggplot(top10_immigrates, aes(x = immigrates, y = reorder(VISUALIZATION_NAME, immigrates))) +
  geom_point(shape = 1, size = 3) +
  labs(title = "Top Inflows (per capita)", x = "", y = "") +
  theme_minimal()

# Display both plots side by side
p3 + p4

```

```{r}
# Select explanatory covariates for 2022
cov_2022 <- my_covariates %>%
  filter(period == "2022") %>%
  select(
    ISO3, lifeexp, politicalstability, vulnerability, natural_disaster,
    conflictpercapita, t2m_diff, dry, prec_5days, ghwr_35, hwf_upp, unemployment_rate
  )

# Merge with table_rates
table_corr <- table_rates %>%
  left_join(cov_2022, by = "ISO3")

### Correlation matrix

library(corrr)

# Select numeric columns
numeric_vars <- table_corr %>%
  select(emigrates, immigrates, net,
         lifeexp, politicalstability, vulnerability, natural_disaster,
         conflictpercapita, t2m_diff, dry, prec_5days, ghwr_35, hwf_upp, unemployment_rate)

# Compute correlations with NA handling
cor_matrix <- correlate(numeric_vars, use = "pairwise.complete.obs")

# Visualization
cor_matrix %>%
  stretch() %>%
  filter(x %in% c("emigrates", "immigrates")) %>%
  ggplot(aes(x = reorder(y, r), y = r, fill = x)) +
  geom_col(position = "dodge") +
  coord_flip() +
  labs(title = "Correlation with Migration Rates",
       x = "Explanatory Variable", y = "Pearson correlation") +
  theme_minimal()
```

-   **Positive Correlates of Immigration:**
    -   **Life expectancy** and **political stability** are positively correlated with immigration. These countries tend to attract migrants due to better living conditions and governance.
    -   **Net migration** is, by construction, highly correlated with immigration.
    -   **Climatic variables** such as **temperature anomalies** and **precipitation extremes** show moderate positive relationships.
-   **Positive Correlates of Emigration:**
    -   **Conflict per capita** and **natural disasters** are positively associated with emigration, reflecting common push factors.
    -   **Drought conditions** and **heatwaves** (e.g., `dry`, `hwf_upp`) also align with climate-induced migration pressures.
-   **Inverse Relationships Across Migration Types:**
    -   **Political stability**: *positive* for immigration, *negative* for emigration.
    -   **Life expectancy**: *positive* for immigration, *negative* or weakly negative for emigration.
    -   **Vulnerability index**: tends to increase emigration and reduce immigration.

```{r}
# Fix invalid geometries and merge geometries by country
world_clean <- world %>%
  mutate(geometry = st_make_valid(geometry)) %>%
  group_by(ISO3, VISUALIZATION_NAME) %>%
  summarise(geometry = st_union(geometry), .groups = "drop")

# Merge with population + inflow/outflow and per capita migration rates
world_final <- world_clean %>%
  left_join(table_rates %>% select(ISO3, population, inflow, outflow, immigrates, emigrates, net), by = "ISO3")

```

```{r}
ggplot(world_final) +
  geom_sf(aes(fill = emigrates), color = "white", size = 0.1) +
  scale_fill_viridis_c(option = "inferno", name = "Emigration rate", trans = "sqrt") +
  theme_minimal() +
  labs(title = "Emigration Rate by Country (2020–2024)")
```

```{r}
ggplot(world_final) +
  geom_sf(aes(fill = immigrates), color = "white", size = 0.1) +
  scale_fill_viridis_c(option = "plasma", name = "Immigration rate", trans = "sqrt") +
  theme_minimal() +
  labs(title = "Immigration Rate by Country (2020–2024)")

```

```{r}
ggplot(world_final) +
  geom_sf(aes(fill = net), color = "white", size = 0.1) +
  scale_fill_gradient2(
    low = "red", mid = "black", high = "blue", midpoint = 0.2,
    name = "Net migration rate"
  ) +
  theme_void() +
  labs(
    title = "Net Migration Rate (2020–2024)",
    caption = "Blue = net inflow, Red = net outflow"
  )
```

```{r}
# Filter temperature variation data for 2022
climate_2022 <- my_covariates %>%
  filter(period == "2022") %>%
  select(ISO3, t2m_diff)

# Join temperature data with the spatial dataset
world_final <- world_final %>%
  left_join(climate_2022, by = "ISO3")

# Plot map of temperature variation
ggplot(world_final) +
  geom_sf(aes(fill = t2m_diff), color = "white", size = 0.1) +
  scale_fill_viridis_c(option = "C", name = "Δ Temperature (°C)") +
  theme_void() +
  labs(
    title = "Temperature Change by Country (2020–2024)",
    caption = "Source: CCMN Climate Data"
  )
```

```{r}
# 1. Prepare centroids (country center coordinates)
coords <- st_centroid(world_final$geometry)

# 2. Convert the centroids into a coordinate matrix
coords_mat <- st_coordinates(coords)

# 3. Create contiguity-based neighbors (Queen criterion)
nb_contig <- poly2nb(world_final)

# 4. Create 4-nearest neighbors
nb_knn <- knn2nb(knearneigh(coords_mat, k = 4))

# 5. Combine both types of neighbors
nb_combined <- union.nb(nb_contig, nb_knn)

# 6. Plot the map with neighborhood links
plot(st_geometry(world_final), col = "lightgray", main = "Neighborhood Links")
plot(nb_combined, coords = coords_mat, add = TRUE, col = "black", lwd = 0.7)
```

### Moran scatterplot

```{r}
world_net <- world_final %>% 
  filter(!is.na(net))

# 2. Create spatial weights using only countries with data
coords_net <- st_coordinates(st_centroid(world_net$geometry))
nb_net <- poly2nb(world_net)
nb_net_combined <- union.nb(nb_net, knn2nb(knearneigh(coords_net, k = 4)))
listw_net <- nb2listw(nb_net_combined, style = "W", zero.policy = TRUE)
# 1. Prepare lagged variable and mean values
world_net$lag_net <- lag.listw(listw_net, world_net$net)
mean_net <- mean(world_net$net, na.rm = TRUE)
mean_lag_net <- mean(world_net$lag_net, na.rm = TRUE)

# 2. Quadrant classification
world_net$quad <- case_when(
  world_net$net >= mean_net & world_net$lag_net >= mean_lag_net ~ "High-High",
  world_net$net <  mean_net & world_net$lag_net <  mean_lag_net ~ "Low-Low",
  world_net$net >= mean_net & world_net$lag_net <  mean_lag_net ~ "High-Low",
  world_net$net <  mean_net & world_net$lag_net >= mean_lag_net ~ "Low-High"
)

# 3. Assign colors to quadrants
quad_colors <- c(
  "High-High" = "red",
  "Low-Low" = "purple",
  "High-Low" = "green",
  "Low-High" = "cyan"
)

# 4. Create the custom Moran scatter plot
ggplot(world_net, aes(x = net, y = lag_net, color = quad)) +
  geom_hline(yintercept = mean_lag_net, linetype = "dashed") +
  geom_vline(xintercept = mean_net, linetype = "dashed") +
  geom_point(size = 2, alpha = 0.8) +
  geom_smooth(method = "lm", se = TRUE, color = "black") +
  scale_color_manual(values = quad_colors, name = "Cluster") +
  theme_minimal() +
  labs(
    x = "Net Migration Rate",
    y = "Spatial Lag of Net Migration Rate",
    title = "Moran Scatter Plot: Net Migration Rate"
  )
```

```{r}
# 1. Reuse spatial weights already computed: listw_net
# 2. Local Moran's I on filtered data
local_moran_net <- localmoran(world_net$net, listw_net, zero.policy = TRUE)

# 3. Add results to the filtered spatial dataframe
world_net$local_I <- local_moran_net[, 1]         # Local Moran's I value
world_net$local_p <- local_moran_net[, 5]         # p-value
```

```{r}
# 1. Compute spatial lag
world_net$lag_net <- lag.listw(listw_net, world_net$net)

# 2. Define means
mean_net <- mean(world_net$net, na.rm = TRUE)
mean_lag_net <- mean(world_net$lag_net, na.rm = TRUE)

# 3. Compute Local Moran's I
local_net <- localmoran(world_net$net, listw_net, zero.policy = TRUE)
world_net$local_I <- local_net[, 1]
world_net$local_p <- local_net[, 5]

# 4. Define LISA quadrant
world_net$quad <- case_when(
  world_net$net >= mean_net & world_net$lag_net >= mean_lag_net ~ "HH",
  world_net$net <  mean_net & world_net$lag_net <  mean_lag_net ~ "LL",
  world_net$net >= mean_net & world_net$lag_net <  mean_lag_net ~ "HL",
  world_net$net <  mean_net & world_net$lag_net >= mean_lag_net ~ "LH"
)

# 5. Keep only significant clusters (e.g., p < 0.05)
world_net$quad_sig <- ifelse(world_net$local_p < 0.05, world_net$quad, NA)

# 6. Plot: significant LISA clusters
ggplot(world_net) +
  geom_sf(aes(fill = quad_sig), color = "white", size = 0.1) +
scale_fill_manual(
  values = c("HH" = "red", "LL" = "blue", "HL" = "green", "LH" = "cyan"),
  na.value = "grey90",  # <- this line fixes the error
  name = "LISA Cluster"
) +
  theme_minimal() +
  labs(
    title = "LISA Cluster Map: Net Migration Rate",
    subtitle = "Significant Local Spatial Autocorrelation (p < 0.05)",
    caption = "Red = High-High, Blue = Low-Low, Green = High-Low, Cyan = Low-High"
  )
```

### Moran test

```{r}
# Global Moran’s I test for net migration rate
moran_test_net <- moran.test(world_net$net, listw_net, zero.policy = TRUE)

# Print the test results
moran_test_net
```

#### Significance Test of Spatial Autocorrelation

We performed a Moran's I test to assess whether the spatial correlation in **net migration rates** (2020–2024) is statistically significant.

The test result is:

-   **Moran’s I**: 0.165
-   **Expected value** under null: –0.0047
-   **Standard deviate (z-score)**: 4.22
-   **p-value**: \< 0.0001

These results indicate **significant positive spatial autocorrelation** in the net migration rate. That is, countries with high or low net migration rates are geographically clustered, justifying the use of spatial econometric models in further analysis.

### OLS Regression

```{r}
# Build a complete dataset using only available columns
ols_data <- world_final %>%
  select(ISO3, VISUALIZATION_NAME, immigrates, emigrates, t2m_diff, population, inflow, outflow, net) %>%
  na.omit()

# OLS regression — emigration
ols_emigrates <- lm(emigrates ~ t2m_diff + population + inflow + outflow + net, data = ols_data)

# OLS regression — immigration
ols_immigrates <- lm(immigrates ~ t2m_diff + population + inflow + outflow + net, data = ols_data)

# Model summaries
summary(ols_emigrates)
summary(ols_immigrates)
```

### Interpretation of the OLS results

#### Emigration Model (`emigrates`)

The model explains about **41%** of the variance in emigration rates across countries (**Adjusted R² = 0.40**), and the F-statistic confirms that the overall regression is **highly significant** (*p* \< 0.001).

**Key findings:**

-   **Temperature anomaly (`t2m_diff`)** has a **positive and significant** effect on emigration. A one-unit increase is associated with an increase of **0.0052** in the emigration rate.

-   **Population** has a **negative effect**: more populous countries tend to show lower emigration rates per capita. - **Outflow** is **positively associated** with emigration, as expected.

-   **Net migration** has a **strong negative effect**, meaning countries with higher net inflow tend to have **lower** emigration rates.

#### Immigration Model (`immigrates`)

The immigration model performs better, explaining about **66%** of the variance in immigration (**Adjusted R² = 0.66**), with all coefficients highly significant.

**Key results:**

-   **Temperature anomaly (`t2m_diff`)** is again a significant predictor of immigration.

-   **Population** has a **negative** effect, consistent with per capita normalization.

-   **Outflow** is **positively associated**, which may reflect circular or return migration patterns.

-   **Net migration** has a **very strong positive effect** (**+0.743**, *p* \< 0.001), indicating that countries with high net migration are also receiving proportionally more immigrants.

# 3. Bilateral Migration flows

```{r}
# Keep only ISO3 codes that are present in the world map
valid_iso3 <- world$ISO3

# Filter to keep only valid origin and dest countries
mig_rate_filtered <- mig_rate_2020_2024 %>%
  filter(origin %in% valid_iso3 & dest %in% valid_iso3)
```

```{r}
# Filter covariates for 2022
covariates_2022 <- my_covariates %>%
  filter(period == "2022") %>%
  select(ISO3, lifeexp, politicalstability, conflictpercapita, vulnerability, natural_disaster,
         t2m_diff, dry, prec_5days, ghwr_35, hwf_upp, unemployment_rate, population)
```

```{r}
# Join explanatory variables for origin countries
mig_with_covariates <- mig_rate_filtered %>%
  left_join(covariates_2022, by = c("origin" = "ISO3")) %>%
  rename_with(~ paste0("O_", .), .cols = -c(origin, dest, mig_rate))

# Join explanatory variables for destination countries
mig_with_covariates <- mig_with_covariates %>%
  left_join(covariates_2022, by = c("dest" = "ISO3")) %>%
  rename_with(~ paste0("D_", .), .cols = ends_with("_rate") | 
                                    ends_with("lifeexp") | 
                                    ends_with("stability") |
                                    ends_with("population") |
                                    ends_with("vulnerability") |
                                    ends_with("natural_disaster") |
                                    ends_with("conflictpercapita") |
                                    ends_with("t2m_diff") |
                                    ends_with("dry") |
                                    ends_with("prec_5days") |
                                    ends_with("ghwr_35") |
                                    ends_with("hwf_upp"))
```

```{r}
head(mig_with_covariates)
```

```{r}
data_od <- mig_with_covariates
```

### Compute distances between O–D pairs and merge using st_distance()

```{r}
# Load country geometries
world <- ne_countries(scale = "medium", returnclass = "sf") %>%
  select(iso_a3, geometry) %>%
  rename(ISO3 = iso_a3)

# Keep only countries involved in your bilateral data
world_filtered <- world %>%
  filter(ISO3 %in% unique(c(data_od$origin, data_od$dest)))

# Get origin centroids
origins <- data_od %>%
  select(origin) %>%
  distinct() %>%
  left_join(world_filtered, by = c("origin" = "ISO3")) %>%
  st_as_sf()

# Get destination centroids
destinations <- data_od %>%
  select(dest) %>%
  distinct() %>%
  left_join(world_filtered, by = c("dest" = "ISO3")) %>%
  st_as_sf()

# Get centroids of geometries
origins <- origins %>% mutate(geometry = st_centroid(geometry))
destinations <- destinations %>% mutate(geometry = st_centroid(geometry))

# Match geometries to each O–D pair in data_od
origin_geom <- st_geometry(origins)[match(data_od$origin, origins$origin)]
dest_geom   <- st_geometry(destinations)[match(data_od$dest, destinations$dest)]

# Compute distance between each O–D pair (in meters)
data_od$distance_km <- as.numeric(st_distance(origin_geom, dest_geom, by_element = TRUE)) / 1000
```

### Estimate a gravity model

```{r}
str(data_od)
```

```{r}
## Basic gravity model formula
gravity_model <- lm(
  D_mig_rate ~ 
    D_O_lifeexp + D_O_politicalstability + D_O_conflictpercapita + 
    D_O_vulnerability + D_O_natural_disaster + D_O_t2m_diff + 
    D_O_dry + D_O_prec_5days + D_O_ghwr_35 + D_O_hwf_upp + 
    D_O_population +
    D_lifeexp + D_politicalstability + D_conflictpercapita +
    D_vulnerability + D_natural_disaster + D_t2m_diff +
    D_dry + D_prec_5days + D_ghwr_35 + D_hwf_upp + 
    D_population +
    distance_km,
  data = data_od
)
```

```{r}
summary(gravity_model)
```

We estimated a gravity model explaining bilateral migration rates using origin country characteristics, destination country characteristics, and the bilateral distance between country pairs.

The results show that migration flows are significantly influenced by both push and pull factors:

-   Origin country effects:

    -   Conflict per capita and natural disasters significantly increase out-migration.

    -   Political instability in origin countries is associated with higher migration rates.

    -   Other origin variables like climate extremes or unemployment were not significant in this specification.

-   Destination country effects:

    -   Life expectancy and political stability at destination countries positively influence migration inflows, as expected.

    -   Higher vulnerability at the destination reduces migration inflows.

    -   Surprisingly, some climatic stress indicators (e.g., heatwave frequency) show positive associations, possibly reflecting more developed or visible destinations despite climate risk. - Distance between origin and destination countries has a significant negative effect, confirming the standard gravity model prediction: the farther the destination, the lower the migration rate.

Overall, while the R² is low (\~2%), the model identifies meaningful relationships consistent with migration theory, especially regarding the roles of conflict, governance, and geographic distance.

### Investigate whether there is spatial correlation in the residuals when they are aggregated at origin and destination level

```{r}
# 1. Extract the model frame (i.e. the rows actually used in the regression)
model_data <- model.frame(gravity_model)

# Add residuals to this subset
model_data$residuals <- resid(gravity_model)

# Add origin and destination back in if needed
model_data$origin <- data_od$origin[as.numeric(rownames(model_data))]
model_data$dest   <- data_od$dest[as.numeric(rownames(model_data))]

# 2. Aggregate residuals at origin and destination level
# Residuals by origin
resid_origin <- model_data %>%
  group_by(origin) %>%
  summarise(resid_mean = mean(residuals, na.rm = TRUE))

# Residuals by destination
resid_dest <- model_data %>%
  group_by(dest) %>%
  summarise(resid_mean = mean(residuals, na.rm = TRUE))
# 3. Prepare spatial data (centroids of countries)
world_centroids <- world %>%
  mutate(geometry = st_centroid(geometry)) %>%
  select(ISO3, geometry)

# 4. Merge residuals with spatial data
origin_sf <- world_centroids %>%
  left_join(resid_origin, by = c("ISO3" = "origin")) %>%
  filter(!is.na(resid_mean))

dest_sf <- world_centroids %>%
  left_join(resid_dest, by = c("ISO3" = "dest")) %>%
  filter(!is.na(resid_mean))

# 5. Create neighbors and weights
# Origin-level
coords_o <- st_coordinates(origin_sf)
nb_o <- knn2nb(knearneigh(coords_o, k = 4))
lw_o <- nb2listw(nb_o, style = "W", zero.policy = TRUE)

# Destination-level
coords_d <- st_coordinates(dest_sf)
nb_d <- knn2nb(knearneigh(coords_d, k = 4))
lw_d <- nb2listw(nb_d, style = "W", zero.policy = TRUE)

# 6. Moran’s I test
moran_origin <- moran.test(origin_sf$resid_mean, lw_o, zero.policy = TRUE)
moran_dest <- moran.test(dest_sf$resid_mean, lw_d, zero.policy = TRUE)

# 7. Print the results
moran_origin
moran_dest
```

To assess whether spatial patterns remain unexplained by the gravity model, we computed Moran’s I statistics on the model residuals, aggregated at both the origin and destination country levels.

The results are as follows:

-   Origin-level residuals:
    -   Moran’s I = 0.031, p-value = 0.231\
    -   This result is not statistically significant, indicating no strong spatial autocorrelation in residuals at the origin level. In other words, the residuals do not exhibit clustering among neighboring origin countries.
-   Destination-level residuals:
    -   Moran’s I = 0.064, p-value = 0.0298\
    -   This result is statistically significant at the 5% level, suggesting positive spatial autocorrelation in residuals at the destination level. Neighboring destination countries tend to have similar levels of model over- or under-prediction.

Interpretation:\
While the model seems to adequately capture variation in migration flows from the origin side, the presence of spatial clustering in residuals at the destination level implies that some spatially structured factors may be missing from the model. This finding justifies the consideration of spatial econometric models (e.g., spatial error or spatial lag models) to account for unobserved spatial dependencies among destination countries.

```{r}
# Attach residuals to the model data
model_data <- model.frame(gravity_model)
model_data$residuals <- resid(gravity_model)
model_data$origin <- data_od$origin[as.numeric(rownames(model_data))]
model_data$dest <- data_od$dest[as.numeric(rownames(model_data))]

# -------------------------------------
# ORIGIN-level residuals and Moran plot
# -------------------------------------

# 1. Average residuals per origin
resid_origin <- model_data %>%
  group_by(origin) %>%
  summarise(resid = mean(residuals, na.rm = TRUE))

# 2. Join with spatial data
origin_sf <- world %>%
  filter(ISO3 %in% resid_origin$origin) %>%
  left_join(resid_origin, by = c("ISO3" = "origin")) %>%
  st_as_sf()

# 3. Create spatial weights
coords_o <- st_coordinates(st_centroid(origin_sf))
nb_o <- knn2nb(knearneigh(coords_o, k = 4))
lw_o <- nb2listw(nb_o, style = "W", zero.policy = TRUE)

# 4. Compute spatial lag
origin_sf$lag_resid <- lag.listw(lw_o, origin_sf$resid, zero.policy = TRUE)

# 5. Plot
ggplot(origin_sf, aes(x = resid, y = lag_resid)) +
  geom_point(alpha = 0.6) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  geom_vline(xintercept = 0, linetype = "dashed") +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(title = "Moran Scatter Plot (Origin Residuals)",
       x = "Residuals", y = "Spatial Lag of Residuals") +
  theme_minimal()


# -----------------------------------------
# DESTINATION-level residuals and Moran plot
# -----------------------------------------

# 1. Average residuals per destination
resid_dest <- model_data %>%
  group_by(dest) %>%
  summarise(resid = mean(residuals, na.rm = TRUE))

# 2. Join with spatial data
dest_sf <- world %>%
  filter(ISO3 %in% resid_dest$dest) %>%
  left_join(resid_dest, by = c("ISO3" = "dest")) %>%
  st_as_sf()

# 3. Create spatial weights
coords_d <- st_coordinates(st_centroid(dest_sf))
nb_d <- knn2nb(knearneigh(coords_d, k = 4))
lw_d <- nb2listw(nb_d, style = "W", zero.policy = TRUE)

# 4. Compute spatial lag
dest_sf$lag_resid <- lag.listw(lw_d, dest_sf$resid, zero.policy = TRUE)

# 5. Plot
ggplot(dest_sf, aes(x = resid, y = lag_resid)) +
  geom_point(alpha = 0.6) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  geom_vline(xintercept = 0, linetype = "dashed") +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(title = "Moran Scatter Plot (Destination Residuals)",
       x = "Residuals", y = "Spatial Lag of Residuals") +
  theme_minimal()
```

**Interpretation of Moran Scatter Plots for Spatial Lags of Residuals**

We computed spatial lags of the residuals from the gravity model using neighborhood matrices defined at the origin and destination levels. We then visualized these relationships with Moran scatter plots, where each point represents a country and the regression slope indicates the strength and direction of spatial autocorrelation.

1.  Origin-Level Moran Scatter Plot: The origin-based Moran plot reveals a slight positive slope in the relationship between each origin country's residual and the average residuals of its spatial neighbors. However, the slope is relatively flat, suggesting weak spatial autocorrelation. This means that, overall, neighboring origin countries do not exhibit highly similar model residuals. This aligns with the earlier Moran's I test, which was not statistically significant at the origin level.

2.  Destination-Level Moran Scatter Plot: In contrast, the destination-based Moran plot displays a more pronounced positive slope, indicating moderate spatial clustering of residuals among destination countries. This suggests that neighboring destinations tend to experience similar levels of over- or under-prediction by the gravity model. These results are consistent with the significant Moran's I test at the destination level.

Summary: These findings confirm that there is some degree of spatial dependence in the residuals—particularly for destination countries. This reinforces the idea that spatial processes are not fully captured by the current model and that spatial econometric approaches (e.g., spatial error or lag models) may help better account for these spatial structures.
